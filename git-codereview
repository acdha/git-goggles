#!/usr/bin/env python

import subprocess
import sys

def get_current_branch():
    p = subprocess.Popen(['git', 'branch'], stdout=subprocess.PIPE)
    output = p.communicate()[0].split('\n')
    return [line[2:] for line in output if line and line[0] == '*'][0]
    
def get_branches():
    p = subprocess.Popen(['git', 'branch'], stdout=subprocess.PIPE)
    output = p.communicate()[0].split('\n')
    return [line[2:] for line in output if line]

def get_tags():
    p = subprocess.Popen(['git', 'tag'], stdout=subprocess.PIPE)
    output = p.communicate()[0].split('\n')
    return filter(lambda x: x.endswith('-codereview'), output)

def get_status():
    branches = get_branches()
    tags = get_tags()

    for branch in branches:
        if "%s-codereview" % branch not in tags:
            print "%s needs to be reviewed (no tag)" % branch
        else:
            p = subprocess.Popen([
                'git',
                'diff',
                '%s-codereview..%s' % (branch, branch) 
                ], stdout=subprocess.PIPE)
            output = p.communicate()[0]
            if output:
                print '%s needs to be reviewed with following diff:\n %s' % (branch, output)

def complete_review():
    branch = get_current_branch()
    p = subprocess.Popen([
        'git',
        'tag',
        '-a',
        '%s-codereview' % branch,
        '-f',
        '-m',
        'creating code review for branch %s' % branch,
        ])
    p.communicate()
    print 'created tag %s-codereview' % branch

if __name__ == "__main__":
    if len(sys.argv) == 1:
        get_status()
    elif len(sys.argv) == 2:
        if sys.argv[1] == 'complete':
            complete_review()
        else:
            print 'usage: git codereview [complete]'
            
